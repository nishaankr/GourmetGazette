{"remainingRequest":"C:\\Users\\nisha\\OneDrive\\Desktop\\FireBlogs-YouTube-Finished-Source-Code\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\nisha\\OneDrive\\Desktop\\FireBlogs-YouTube-Finished-Source-Code\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\nisha\\OneDrive\\Desktop\\FireBlogs-YouTube-Finished-Source-Code\\src\\store\\index.js","dependencies":[{"path":"C:\\Users\\nisha\\OneDrive\\Desktop\\FireBlogs-YouTube-Finished-Source-Code\\src\\store\\index.js","mtime":1682462146422},{"path":"C:\\Users\\nisha\\OneDrive\\Desktop\\FireBlogs-YouTube-Finished-Source-Code\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\nisha\\OneDrive\\Desktop\\FireBlogs-YouTube-Finished-Source-Code\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\nisha\\OneDrive\\Desktop\\FireBlogs-YouTube-Finished-Source-Code\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/nisha/OneDrive/Desktop/FireBlogs-YouTube-Finished-Source-Code/src/store/index.js"],"names":["Vue","Vuex","firebase","db","use","Store","state","blogPosts","postLoaded","blogHTML","blogTitle","blogPhotoName","blogPhotoFileURL","blogPhotoPreview","editPost","user","profileAdmin","profileEmail","profileFirstName","profileLastName","profileUsername","profileId","profileInitials","getters","blogPostsFeed","slice","blogPostsCards","mutations","newBlogPost","payload","updateBlogTitle","fileNameChange","createFileURL","openPhotoPreview","toggleEditPost","setBlogState","blogCoverPhoto","blogCoverPhotoName","filterBlogPost","filter","post","blogID","updateUser","setProfileAdmin","console","log","setProfileInfo","doc","id","data","email","firstName","lastName","username","setProfileInitials","match","join","changeFirstName","changeLastName","changeUsername","actions","getCurrentUser","commit","collection","auth","currentUser","uid","dataBase","get","dbResults","getIdTokenResult","token","claims","admin","getPost","orderBy","forEach","some","blogDate","date","push","updatePost","dispatch","deletePost","delete","updateUserSettings","update","modules"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport db from \"../firebase/firebaseInit\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    blogPosts: [],\n    postLoaded: null,\n    blogHTML: \"Write your blog title here...\",\n    blogTitle: \"\",\n    blogPhotoName: \"\",\n    blogPhotoFileURL: null,\n    blogPhotoPreview: null,\n    editPost: null,\n    user: null,\n    profileAdmin: null,\n    profileEmail: null,\n    profileFirstName: null,\n    profileLastName: null,\n    profileUsername: null,\n    profileId: null,\n    profileInitials: null,\n  },\n  getters: {\n    blogPostsFeed(state) {\n      return state.blogPosts.slice(0, 2);\n    },\n    blogPostsCards(state) {\n      return state.blogPosts.slice(2, 6);\n    },\n  },\n  mutations: {\n    newBlogPost(state, payload) {\n      state.blogHTML = payload;\n    },\n    updateBlogTitle(state, payload) {\n      state.blogTitle = payload;\n    },\n    fileNameChange(state, payload) {\n      state.blogPhotoName = payload;\n    },\n    createFileURL(state, payload) {\n      state.blogPhotoFileURL = payload;\n    },\n    openPhotoPreview(state) {\n      state.blogPhotoPreview = !state.blogPhotoPreview;\n    },\n    toggleEditPost(state, payload) {\n      state.editPost = payload;\n    },\n    setBlogState(state, payload) {\n      state.blogTitle = payload.blogTitle;\n      state.blogHTML = payload.blogHTML;\n      state.blogPhotoFileURL = payload.blogCoverPhoto;\n      state.blogPhotoName = payload.blogCoverPhotoName;\n    },\n    filterBlogPost(state, payload) {\n      state.blogPosts = state.blogPosts.filter(\n        (post) => post.blogID !== payload\n      );\n    },\n    updateUser(state, payload) {\n      state.user = payload;\n    },\n    setProfileAdmin(state, payload) {\n      state.profileAdmin = payload;\n      console.log(state.profileAdmin);\n    },\n    setProfileInfo(state, doc) {\n      state.profileId = doc.id;\n      state.profileEmail = doc.data().email;\n      state.profileFirstName = doc.data().firstName;\n      state.profileLastName = doc.data().lastName;\n      state.profileUsername = doc.data().username;\n      console.log(state.profileId);\n    },\n    setProfileInitials(state) {\n      state.profileInitials =\n        state.profileFirstName.match(/(\\b\\S)?/g).join(\"\") +\n        state.profileLastName.match(/(\\b\\S)?/g).join(\"\");\n    },\n    changeFirstName(state, payload) {\n      state.profileFirstName = payload;\n    },\n    changeLastName(state, payload) {\n      state.profileLastName = payload;\n    },\n    changeUsername(state, payload) {\n      state.profileUsername = payload;\n    },\n  },\n  actions: {\n    async getCurrentUser({ commit }, user) {\n      const dataBase = await db\n        .collection(\"users\")\n        .doc(firebase.auth().currentUser.uid);\n      const dbResults = await dataBase.get();\n      commit(\"setProfileInfo\", dbResults);\n      commit(\"setProfileInitials\");\n      const token = await user.getIdTokenResult();\n      const admin = await token.claims.admin;\n      commit(\"setProfileAdmin\", admin);\n    },\n    async getPost({ state }) {\n      const dataBase = await db.collection(\"blogPosts\").orderBy(\"date\", \"desc\");\n      const dbResults = await dataBase.get();\n      dbResults.forEach((doc) => {\n        if (!state.blogPosts.some((post) => post.blogID === doc.id)) {\n          const data = {\n            blogID: doc.data().blogID,\n            blogHTML: doc.data().blogHTML,\n            blogCoverPhoto: doc.data().blogCoverPhoto,\n            blogTitle: doc.data().blogTitle,\n            blogDate: doc.data().date,\n            blogCoverPhotoName: doc.data().blogCoverPhotoName,\n          };\n          state.blogPosts.push(data);\n        }\n      });\n      state.postLoaded = true;\n    },\n    async updatePost({ commit, dispatch }, payload) {\n      commit(\"filterBlogPost\", payload);\n      await dispatch(\"getPost\");\n    },\n    async deletePost({ commit }, payload) {\n      const getPost = await db.collection(\"blogPosts\").doc(payload);\n      await getPost.delete();\n      commit(\"filterBlogPost\", payload);\n    },\n    async updateUserSettings({ commit, state }) {\n      const dataBase = await db.collection(\"users\").doc(state.profileId);\n      await dataBase.update({\n        firstName: state.profileFirstName,\n        lastName: state.profileLastName,\n        username: state.profileUsername,\n      });\n      commit(\"setProfileInitials\");\n    },\n  },\n  modules: {},\n});\n"]}]}